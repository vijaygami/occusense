#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('DepthSense:server');
var server = require('http').createServer(app);
var ioServer = require('socket.io')(server);
var models = require('./schemas/schemas');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Client-server connection through socket.io
ioServer.on('connection', function(socket){
  console.log('New client connected with id = ' + socket.id);

  socket.on('disconnect', function(){
    console.log(socket.id + ' disconnected!!');
  });
  
  // Custom socket event to assign ID to new user
  socket.on('request new user id', function(data){
    var personsCount = models.Person.count();
    var newPersonID, lastPersonID;

    if (personsCount == 0) {
      // If no people in database then assign ID = 1
      newPersonID = 1;
    } 
    else {
      // Else find the max used ID and generate a new ID
      
      // Query 'persons' collection to find max used ID
      models.Person
        .findOne()
        .sort('-personID')
        .exec(function(err, doc)
          {
            lastPersonID = doc.personID;
          });

      // Generate new ID
      newPersonID  = lastPersonID + 1;
    }

    userName = "Guest_" + newPersonID;

    // Save user document to 'persons' collection
    

    // Broadcast new user details to all clients
    socket.emit('new user', {userID:newPersonID, user:userName})

  })
})